/**************************************************************************************** 

Title : Write a program to solve the travelling salesman problem 
           and to print the path and the cost using  Branch and Bound.
Name : kalpesh s. sonawane
Roll no : 55
 
******************************************************************************************/

#include<iostream>
 
using namespace std;
 
int ary[10][10],completed[10],n,cost=0;
 
int least(int c)
{
    int i,nc=999;
    int min=999,kmin;
 
 	//cout<<"\n-------------------\n";
    for(i=0;i < n;i++)
    {
        if((ary[c][i]!=0)&&(completed[i]==0))
        {
            if(ary[c][i]+ary[i][c] < min)
            {
                min=ary[i][0]+ary[c][i];
                kmin=ary[c][i];
                nc=i;
            }
    	}
        
        //cout<<"\nCurrent: "<<nc<<"   km: "<<kmin;
    }
	//cout<<"\n-------------------\n"; 
 
    if(min!=999)
        cost+=kmin;
    //cout<<"\nFinal: "<<nc<<endl;
    return nc;
}
 
void mincost(int city)
{
    int i,ncity;
 
    completed[city]=1;
 
    cout<<city+1<<"--->";
    ncity=least(city);
 
    if(ncity==999)
    {
        ncity=0;
        cout<<ncity+1;
        cost+=ary[city][ncity];
 
        return;
    }
 
    mincost(ncity);
}
 
int main()
{
    int i,j,start;
 
    cout<<"Enter the number of Cities: ";
    cin>>n;
 
    cout<<"\nEnter the Cost Matrix of your routes to all cities...\n";
 
    for(i=0;i < n;i++)
    {
        cout<<"\nEnter Elements of Row: "<<i+1<<"\n";
 
        for( j=0;j < n;j++)
            cin>>ary[i][j];
 
        completed[i]=0;
    }
 
    cout<<"\n\nThe cost list is:";
 
    for( i=0;i < n;i++)
    {
        cout<<"\n";
 
        for(j=0;j < n;j++)
            cout<<"\t"<<ary[i][j];
    }
 
 //	cout<<"\nPlease enter the city number from where you want to start : ";
 //	cin>>start;
    cout<<"\n\nThe Path is:\n";
  //  mincost(start-1);
  mincost(0);
 
    cout<<"\n\n cost is "<<cost;
 
    return 0;
}

/****************OUTPUT *************************/
Enter the number of Cities: 3

Enter the Cost Matrix of your routes to all cities...

Enter Elements of Row: 1
0 1 2 3

Enter Elements of Row: 2
0 1 2 3

Enter Elements of Row: 3
0 1 2 3


The cost list is:
        0       1       2
        3       0       1
        2       3       0

The Path is:
1--->2--->3--->1

 cost is 4
--------------------------------
Process exited after 31.2 seconds with return value 0
Press any key to continue . . .